package pages

import (
	"fmt"
	"image/color"
	"strconv"
	"strings"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
	yaac_shared "github.com/DHBW-SE-2023/YAAC/internal/shared"
	"gorm.io/gorm"
)

type students struct {
	name   *widget.Label
	course *widget.Label
}

func studentScreen(_ fyne.Window) fyne.CanvasObject {
	title := canvas.NewText(" Studenten", color.Black)
	title.Alignment = fyne.TextAlignLeading
	title.TextSize = 28
	title.TextStyle = fyne.TextStyle{Bold: true}
	student := &students{
		name:   widget.NewLabel(""),
		course: widget.NewLabel(""),
	}
	var studentNames []string
	var attendanceData = [][]string{
		[]string{"Datum", "Anwesenheit"}}

	// attendanceList := widget.NewTable(
	// 	func() (int, int) {
	// 		return len(attendanceData), len(attendanceData[0])
	// 	},
	// 	func() fyne.CanvasObject {
	// 		return widget.NewLabel("Template")
	// 	},
	// 	func(i widget.TableCellID, cell fyne.CanvasObject) {
	// 		cell.(*widget.Label).SetText(attendanceData[i.Row][i.Col])
	// 	})
	attendanceList := widget.NewTable(nil, nil, nil)
	attendanceList.Length = func() (int, int) {
		return len(attendanceData), len(attendanceData[0])
	}
	attendanceList.CreateCell = func() fyne.CanvasObject {
		return widget.NewLabel("table")
	}
	attendanceList.UpdateCell = func(id widget.TableCellID, template fyne.CanvasObject) {
		label1 := template.(*widget.Label)
		label1.SetText(attendanceData[id.Row][id.Col])
	}

	selection := widget.NewLabel("")
	studentDropdown := widget.NewSelect(studentNames, func(s string) {
		student.name.SetText(s)
		selection.SetText(updateSelection(student))
		attendanceList = refreshStudentAttendancyList(student.course.Text, s)
		fmt.Println(attendanceList.Length())
		fmt.Println(attendanceList)
	})

	courseDropdown := widget.NewSelect([]string{
		"TIK22",
		"TIT22",
		"TIS22",
		"TIM22",
	}, func(s string) {
		student.course.SetText(s)
		selection.SetText(updateSelection(student))
		studentNames = refreshStudentDropdown(studentDropdown, s)
	})

	dropdownArea := container.NewHBox(courseDropdown, studentDropdown)
	selectionArea := container.NewVBox(selection, widget.NewSeparator())
	attendanceList.SetColumnWidth(0, 140)
	attendanceList.SetRowHeight(2, 50)
	header := container.NewGridWrap(fyne.NewSize(400, 200), title)
	studentView := container.NewBorder(container.NewVBox(header, dropdownArea), nil, nil, nil, container.NewBorder(selectionArea, nil, nil, nil, attendanceList))
	return studentView
}

func updateSelection(student *students) string {
	return fmt.Sprintf("%s - %s", student.name.Text, student.course.Text)
}

func refreshStudentDropdown(studentDropdown *widget.Select, course string) []string {
	selectedCourse, _ := myMVVM.CourseByName(course)
	students, _ := myMVVM.CourseStudents(yaac_shared.Course{Model: gorm.Model{ID: selectedCourse.ID}})
	var studentNames []string
	for _, studElement := range students {
		studentNames = append(studentNames, fmt.Sprintf("%s %s", studElement.FirstName, studElement.LastName))
	}
	studentDropdown.Options = studentNames
	return studentNames
}

func refreshStudentAttendancyList(course string, student string) *widget.Table {
	selectedCourse, _ := myMVVM.CourseByName(course)
	selectedStudent, _ := myMVVM.Students(yaac_shared.Student{LastName: strings.Split(student, " ")[1]})
	attendances, _ := myMVVM.AllAttendanceListInRangeByCourse(yaac_shared.Course{Model: gorm.Model{ID: selectedCourse.ID}}, time.Now().AddDate(0, 0, -30), time.Now())
	var attendanceList [][]string
	for _, attendance := range attendances {
		for _, attendancy := range attendance.Attendancies {
			if attendancy.StudentID == selectedStudent[0].ID {
				fmt.Println(attendance.ReceivedAt)
				attendanceList = append(attendanceList, []string{attendance.ReceivedAt.Format("2006-01-02"), strconv.FormatBool(attendancy.IsAttending)})
			}
		}
	}
	attendanceTable := widget.NewTable(
		func() (int, int) {
			return len(attendanceList), len(attendanceList[0])
		},
		func() fyne.CanvasObject {
			return widget.NewLabel("Template")
		},
		func(i widget.TableCellID, cell fyne.CanvasObject) {
			cell.(*widget.Label).SetText(attendanceList[i.Row][i.Col])
		})
	return attendanceTable
}
